{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nconst _c0 = [\"comment\"];\nfunction OptionComponent_ol_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ol\")(1, \"li\", 3);\n    i0.ɵɵlistener(\"click\", function OptionComponent_ol_1_Template_li_click_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r4);\n      const option_r2 = restoredCtx.$implicit;\n      const ctx_r3 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r3.answer(option_r2));\n    });\n    i0.ɵɵelementStart(2, \"span\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const option_r2 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵclassProp(\"selected\", ctx_r0.isOptionSelected(option_r2));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(option_r2.text);\n  }\n}\nfunction OptionComponent_div_2_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11)(1, \"label\");\n    i0.ɵɵtext(2, \" Comment saved!\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction OptionComponent_div_2_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 12)(1, \"span\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(ctx_r7.textErrorComment);\n  }\n}\nfunction OptionComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4)(1, \"label\", 5);\n    i0.ɵɵtext(2, \"Enter a comment: \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(3, \"input\", 6, 7);\n    i0.ɵɵelementStart(5, \"button\", 8);\n    i0.ɵɵlistener(\"click\", function OptionComponent_div_2_Template_button_click_5_listener() {\n      i0.ɵɵrestoreView(_r9);\n      const ctx_r8 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r8.saveComment());\n    });\n    i0.ɵɵtext(6, \" save comment \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵtemplate(7, OptionComponent_div_2_div_7_Template, 3, 0, \"div\", 9);\n    i0.ɵɵtemplate(8, OptionComponent_div_2_div_8_Template, 3, 1, \"div\", 10);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(3);\n    i0.ɵɵpropertyInterpolate(\"value\", ctx_r1.questionList[ctx_r1.currentQuestion].comment);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.questionList[ctx_r1.currentQuestion].comment != \"\");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.textErrorComment != \"\");\n  }\n}\nexport class OptionComponent {\n  constructor() {\n    this.currentQuestion = 0;\n    this.answers = new Map();\n    this.questionList = [];\n    this.setProgressPrecent = new EventEmitter();\n    this.setTextErrorComment = new EventEmitter();\n    this.textErrorComment = '';\n  }\n  isOptionSelected(option) {\n    return this.answers.get(this.currentQuestion)?.find(selectedOption => selectedOption.text === option.text) != undefined;\n  }\n  answer(option) {\n    if (!this.answers.has(this.currentQuestion)) {\n      this.newAnswerHandle(option);\n    } else {\n      if (this.questionList[this.currentQuestion].type === 'Single') {\n        this.singleAnswerHandle(option);\n      } else {\n        this.multipleAnswerHandle(option);\n      }\n    }\n  }\n  multipleAnswerHandle(option) {\n    if (this.isOptionSelected(option)) {\n      this.answers.get(this.currentQuestion)?.pop();\n      if (this.answers.get(this.currentQuestion)?.length == 0) {\n        this.answers.delete(this.currentQuestion);\n      }\n    } else {\n      this.answers.get(this.currentQuestion)?.push(option);\n    }\n    this.setProgressPrecent.emit();\n  }\n  singleAnswerHandle(option) {\n    this.answers.get(this.currentQuestion)?.pop();\n    this.answers.get(this.currentQuestion)?.push(option);\n  }\n  newAnswerHandle(option) {\n    let selectedOptions = [];\n    selectedOptions.push(option);\n    this.answers.set(this.currentQuestion, selectedOptions);\n    this.setProgressPrecent.emit();\n  }\n  checkTextValid(text) {\n    return /^$|^[a-zA-ZÀ-ÖØ-öø-ÿ0-9 ]+$/.test(text);\n  }\n  saveComment() {\n    if (this.checkTextValid(this.commentkey.nativeElement.value)) {\n      this.questionList[this.currentQuestion].comment = this.commentkey.nativeElement.value;\n      this.setTextErrorComment.emit('');\n    } else this.setTextErrorComment.emit('Text should not contain any special character');\n  }\n  static #_ = this.ɵfac = function OptionComponent_Factory(t) {\n    return new (t || OptionComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: OptionComponent,\n    selectors: [[\"app-option\"]],\n    viewQuery: function OptionComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.commentkey = _t.first);\n      }\n    },\n    inputs: {\n      currentQuestion: \"currentQuestion\",\n      answers: \"answers\",\n      questionList: \"questionList\",\n      textErrorComment: \"textErrorComment\"\n    },\n    outputs: {\n      setProgressPrecent: \"setProgressPrecent\",\n      setTextErrorComment: \"setTextErrorComment\"\n    },\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"option\"], [4, \"ngFor\", \"ngForOf\"], [\"class\", \"comment\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"card\", 3, \"click\"], [1, \"comment\"], [\"for\", \"\"], [\"type\", \"text\", 1, \"form-control\", 3, \"value\"], [\"comment\", \"\"], [1, \"btn\", \"btn-primary\", 3, \"click\"], [\"class\", \"CommentSaved\", 4, \"ngIf\"], [\"class\", \"textErrorComment\", 4, \"ngIf\"], [1, \"CommentSaved\"], [1, \"textErrorComment\"], [2, \"font-style\", \"italic\"]],\n    template: function OptionComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵtemplate(1, OptionComponent_ol_1_Template, 4, 3, \"ol\", 1);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, OptionComponent_div_2_Template, 9, 3, \"div\", 2);\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.questionList[ctx.currentQuestion] == null ? null : ctx.questionList[ctx.currentQuestion].options);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (ctx.questionList[ctx.currentQuestion] == null ? null : ctx.questionList[ctx.currentQuestion].type) === \"Multiple\");\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf],\n    styles: [\".card[_ngcontent-%COMP%] {\\r\\n    max-width: 800px;\\r\\n    margin: 0 auto;\\r\\n    padding: 10px;\\r\\n  }\\r\\n  li[_ngcontent-%COMP%] {\\r\\n    list-style-type: none;\\r\\n    cursor: pointer;\\r\\n    margin: 10px 0;\\r\\n  }\\r\\n  li.card[_ngcontent-%COMP%]:hover {\\r\\n    border: 1px solid blue;\\r\\n  }\\r\\n\\r\\n  .card.selected[_ngcontent-%COMP%] {\\r\\n    background-color: forestgreen;\\r\\n    color: white;\\r\\n  }\\r\\n  ol[_ngcontent-%COMP%] {\\r\\n    padding: 0;\\r\\n  }\\n/*# sourceURL=webpack://./src/app/option/option.component.css */\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvb3B0aW9uL29wdGlvbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZ0JBQWdCO0lBQ2hCLGNBQWM7SUFDZCxhQUFhO0VBQ2Y7RUFDQTtJQUNFLHFCQUFxQjtJQUNyQixlQUFlO0lBQ2YsY0FBYztFQUNoQjtFQUNBO0lBQ0Usc0JBQXNCO0VBQ3hCOztFQUVBO0lBQ0UsNkJBQTZCO0lBQzdCLFlBQVk7RUFDZDtFQUNBO0lBQ0UsVUFBVTtFQUNaIiwic291cmNlc0NvbnRlbnQiOlsiLmNhcmQge1xyXG4gICAgbWF4LXdpZHRoOiA4MDBweDtcclxuICAgIG1hcmdpbjogMCBhdXRvO1xyXG4gICAgcGFkZGluZzogMTBweDtcclxuICB9XHJcbiAgbGkge1xyXG4gICAgbGlzdC1zdHlsZS10eXBlOiBub25lO1xyXG4gICAgY3Vyc29yOiBwb2ludGVyO1xyXG4gICAgbWFyZ2luOiAxMHB4IDA7XHJcbiAgfVxyXG4gIGxpLmNhcmQ6aG92ZXIge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgYmx1ZTtcclxuICB9XHJcblxyXG4gIC5jYXJkLnNlbGVjdGVkIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGZvcmVzdGdyZWVuO1xyXG4gICAgY29sb3I6IHdoaXRlO1xyXG4gIH1cclxuICBvbCB7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gIH0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["EventEmitter","i0","OptionComponent","constructor","Map","isOptionSelected","option","answers","get","currentQuestion","find","selectedOption","text","undefined","answer","has","newAnswerHandle","questionList","type","singleAnswerHandle","multipleAnswerHandle","pop","length","delete","push","setProgressPrecent","emit","selectedOptions","set","checkTextValid","test","saveComment","commentkey","nativeElement","value","comment","setTextErrorComment","selectors","viewQuery"],"sourceRoot":"","sources":["C:\\Users\\97252\\source\\repos\\QuizProject\\ClientSide\\src\\app\\option\\option.component.ts","C:\\Users\\97252\\source\\repos\\QuizProject\\ClientSide\\src\\app\\option\\option.component.html"],"sourcesContent":["import { Component, Input, Output , EventEmitter, ViewChild, ElementRef } from '@angular/core';\nimport { question, option } from '../models/question';\n\n@Component({\n  selector: 'app-option',\n  templateUrl: './option.component.html',\n  styleUrls: ['./option.component.css']\n})\nexport class OptionComponent {\n  @ViewChild('comment') commentkey!: ElementRef;\n  @Input() currentQuestion = 0;\n  @Input() answers = new Map<number, option[]>();\n  @Input()  questionList: question[] = [];\n  @Output() setProgressPrecent = new EventEmitter();\n  @Output() setTextErrorComment = new EventEmitter<string>();\n  @Input()  textErrorComment = '';\n\n  isOptionSelected(option: option) {\n    return (\n      this.answers\n        .get(this.currentQuestion)\n        ?.find((selectedOption) => selectedOption.text === option.text) !=\n      undefined\n    );\n  }\n\n  answer(option: option) {\n    if (!this.answers.has(this.currentQuestion)) {\n      this.newAnswerHandle(option);\n    } else {\n      if (this.questionList[this.currentQuestion].type === 'Single') {\n        this.singleAnswerHandle(option);\n      } else {\n        this.multipleAnswerHandle(option);\n      }\n    }\n  }\n\n  private multipleAnswerHandle(option: option) {\n    if (this.isOptionSelected(option)) {\n      this.answers.get(this.currentQuestion)?.pop();\n      if (this.answers.get(this.currentQuestion)?.length == 0) {\n        this.answers.delete(this.currentQuestion);\n      }\n    } else {\n      this.answers.get(this.currentQuestion)?.push(option);\n    }\n    this.setProgressPrecent.emit();\n  }\n\n  private singleAnswerHandle(option: option) {\n    this.answers.get(this.currentQuestion)?.pop();\n    this.answers.get(this.currentQuestion)?.push(option);\n  }\n\n  private newAnswerHandle(option: option) {\n    let selectedOptions: option[] = [];\n    selectedOptions.push(option);\n    this.answers.set(this.currentQuestion, selectedOptions);\n    this.setProgressPrecent.emit();\n  }\n\n  checkTextValid(text: string): boolean {\n    return /^$|^[a-zA-ZÀ-ÖØ-öø-ÿ0-9 ]+$/.test(text);\n  }\n  \n  saveComment() {\n    if (this.checkTextValid(this.commentkey.nativeElement.value)) {\n      this.questionList[this.currentQuestion].comment =\n        this.commentkey.nativeElement.value;\n        this.setTextErrorComment.emit('');\n    } else\n      this.setTextErrorComment.emit('Text should not contain any special character');\n  }\n}\n","<div class=\"option\">\n  <ol *ngFor=\"let option of questionList[currentQuestion]?.options\">\n    <li [class.selected]=\"isOptionSelected(option)\" class=\"card\" type=\"button\" (click)=\"answer(option)\">\n      <span>{{ option.text }}</span>\n    </li>\n  </ol>\n</div>\n<div class=\"comment\" *ngIf=\"questionList[currentQuestion]?.type === 'Multiple'\">\n  <label for=\"\">Enter a comment: </label>\n  <input #comment type=\"text\" class=\"form-control\" value=\"{{ this.questionList[this.currentQuestion].comment }}\" />\n  <button class=\"btn btn-primary\" (click)=\"saveComment()\">\n    save comment\n  </button>\n  <div class=\"CommentSaved\" *ngIf=\"this.questionList[this.currentQuestion].comment != ''\">\n    <label> Comment saved!</label>\n  </div>\n  <div class=\"textErrorComment\" *ngIf=\"textErrorComment != ''\">\n    <span style=\"font-style: italic\">{{ textErrorComment }}</span>\n  </div>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}